import os
import requests
from twilio.rest import Client

# ---------------------------- CONSTANTES ------------------------------- #
# Chaves de API e tokens (idealmente, seriam carregados de vari√°veis de ambiente ou um arquivo de configura√ß√£o seguro)
VIRTUAL_TWILIO_NUMBER = "your virtual twilio number"  # Seu n√∫mero Twilio virtual
VERIFIED_NUMBER = "your own phone number verified with Twilio"  # Seu n√∫mero de telefone verificado no Twilio
STOCK_API_KEY = os.environ.get("ALPHA_VANTAGE_API_KEY")  # Chave da API Alpha Vantage
NEWS_API_KEY = os.environ.get("NEWS_API_KEY")  # Chave da API NewsAPI
TWILIO_SID = os.environ.get("TWILIO_ACCOUNT_SID")  # SID da conta Twilio
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")  # Token de autentica√ß√£o Twilio

# Informa√ß√µes da empresa e endpoints das APIs
STOCK_NAME = "TSLA"  # S√≠mbolo da a√ß√£o (ex: TSLA para Tesla)
COMPANY_NAME = "Tesla Inc"  # Nome completo da empresa
STOCK_ENDPOINT = "https://www.alphavantage.co/query"  # Endpoint da API Alpha Vantage
NEWS_ENDPOINT = "https://newsapi.org/v2/everything"  # Endpoint da API NewsAPI

# Limiar de varia√ß√£o percentual para acionar o alerta de not√≠cias
PERCENTAGE_THRESHOLD = 1  # Porcentagem de varia√ß√£o para considerar como significativa

# ---------------------------- FUN√á√ïES DE SERVI√áO ------------------------------- #

def get_stock_data(stock_symbol: str, api_key: str) -> dict:
    """Obt√©m os dados di√°rios de uma a√ß√£o da API Alpha Vantage.

    Args:
        stock_symbol (str): O s√≠mbolo da a√ß√£o (e.g., "TSLA").
        api_key (str): A chave da API Alpha Vantage.

    Returns:
        dict: Um dicion√°rio contendo os dados di√°rios da a√ß√£o.

    Raises:
        requests.exceptions.RequestException: Se a requisi√ß√£o √† API falhar.
    """
    params = {
        "function": "TIME_SERIES_DAILY",
        "symbol": stock_symbol,
        "apikey": api_key,
    }
    response = requests.get(STOCK_ENDPOINT, params=params)
    response.raise_for_status()  # Levanta uma exce√ß√£o para erros de status HTTP
    return response.json()["Time Series (Daily)"]


def calculate_price_difference(data: dict) -> tuple[float, str]:
    """Calcula a diferen√ßa percentual de pre√ßo entre o fechamento de ontem e anteontem.

    Args:
        data (dict): Dados di√°rios da a√ß√£o obtidos da API Alpha Vantage.

    Returns:
        tuple[float, str]: Uma tupla contendo a diferen√ßa percentual (arredondada)
                           e um emoji indicando se o pre√ßo subiu (üî∫) ou desceu (üîª).
    """
    data_list = [value for (key, value) in data.items()] # Converte o dicion√°rio em uma lista de valores
    yesterday_closing_price = float(data_list[0]["4. close"]) # Pre√ßo de fechamento de ontem
    day_before_yesterday_closing_price = float(data_list[1]["4. close"]) # Pre√ßo de fechamento de anteontem

    difference = yesterday_closing_price - day_before_yesterday_closing_price
    up_down = "üî∫" if difference > 0 else "üîª" # Define o emoji de acordo com a varia√ß√£o

    # Calcula a diferen√ßa percentual e arredonda
    diff_percent = round((difference / yesterday_closing_price) * 100)
    return diff_percent, up_down


def get_news_articles(company_name: str, api_key: str, num_articles: int = 3) -> list[dict]:
    """Obt√©m artigos de not√≠cias relacionados a uma empresa da NewsAPI.

    Args:
        company_name (str): O nome da empresa para buscar not√≠cias.
        api_key (str): A chave da API NewsAPI.
        num_articles (int): O n√∫mero m√°ximo de artigos a serem retornados (padr√£o: 3).

    Returns:
        list[dict]: Uma lista de dicion√°rios, onde cada dicion√°rio representa um artigo de not√≠cia.

    Raises:
        requests.exceptions.RequestException: Se a requisi√ß√£o √† API falhar.
    """
    params = {
        "apiKey": api_key,
        "qInTitle": company_name, # Busca not√≠cias onde o t√≠tulo cont√©m o nome da empresa
        "language": "en", # Opcional: define o idioma para ingl√™s
        "sortBy": "relevancy", # Opcional: ordena por relev√¢ncia
    }
    response = requests.get(NEWS_ENDPOINT, params=params)
    response.raise_for_status()  # Levanta uma exce√ß√£o para erros de status HTTP
    articles = response.json()["articles"]
    return articles[:num_articles] # Retorna apenas o n√∫mero especificado de artigos


def format_news_articles(articles: list[dict], stock_symbol: str, diff_percent: float, up_down_emoji: str) -> list[str]:
    """Formata uma lista de artigos de not√≠cias para envio por SMS.

    Args:
        articles (list[dict]): Uma lista de dicion√°rios de artigos de not√≠cias.
        stock_symbol (str): O s√≠mbolo da a√ß√£o.
        diff_percent (float): A diferen√ßa percentual do pre√ßo da a√ß√£o.
        up_down_emoji (str): O emoji indicando a dire√ß√£o da mudan√ßa de pre√ßo.

    Returns:
        list[str]: Uma lista de strings formatadas, prontas para serem enviadas como mensagens SMS.
    """
    formatted_messages = []
    for article in articles:
        headline = article.get("title", "T√≠tulo n√£o dispon√≠vel")
        brief = article.get("description", "Descri√ß√£o n√£o dispon√≠vel")
        message = f"{stock_symbol}: {up_down_emoji}{diff_percent}%\nManchete: {headline}. \nResumo: {brief}"
        formatted_messages.append(message)
    return formatted_messages


def send_sms_messages(messages: list[str], account_sid: str, auth_token: str, from_number: str, to_number: str) -> None:
    """Envia m√∫ltiplas mensagens SMS usando o servi√ßo Twilio.

    Args:
        messages (list[str]): Uma lista de strings, onde cada string √© uma mensagem a ser enviada.
        account_sid (str): SID da conta Twilio.
        auth_token (str): Token de autentica√ß√£o Twilio.
        from_number (str): N√∫mero de telefone Twilio remetente.
        to_number (str): N√∫mero de telefone do destinat√°rio.
    """
    client = Client(account_sid, auth_token)
    for message_body in messages:
        try:
            message = client.messages.create(
                body=message_body,
                from_=from_number,
                to=to_number
            )
            print(f"Mensagem SMS enviada com status: {message.status}")
        except Exception as e:
            print(f"Erro ao enviar SMS: {e}")

# ---------------------------- L√ìGICA PRINCIPAL ------------------------------- #

if __name__ == "__main__":
    # 1. Obter dados da a√ß√£o
    try:
        stock_data = get_stock_data(STOCK_NAME, STOCK_API_KEY)
    except requests.exceptions.RequestException as e:
        print(f"Erro ao obter dados da a√ß√£o: {e}")
        exit() # Sai do programa se n√£o conseguir obter os dados da a√ß√£o

    # 2. Calcular a diferen√ßa de pre√ßo
    diff_percent, up_down = calculate_price_difference(stock_data)

    # 3. Verificar se a varia√ß√£o √© significativa e obter not√≠cias
    if abs(diff_percent) > PERCENTAGE_THRESHOLD:
        try:
            articles = get_news_articles(COMPANY_NAME, NEWS_API_KEY)
        except requests.exceptions.RequestException as e:
            print(f"Erro ao obter not√≠cias: {e}")
            articles = [] # Continua mesmo sem not√≠cias, mas com uma lista vazia

        if articles:
            # 4. Formatar artigos para SMS
            formatted_messages = format_news_articles(articles, STOCK_NAME, diff_percent, up_down)

            # 5. Enviar mensagens SMS
            send_sms_messages(formatted_messages, TWILIO_SID, TWILIO_AUTH_TOKEN, VIRTUAL_TWILIO_NUMBER, VERIFIED_NUMBER)
        else:
            print("Nenhum artigo de not√≠cia relevante encontrado.")
    else:
        print(f"Varia√ß√£o de pre√ßo de {diff_percent}% n√£o atingiu o limiar de {PERCENTAGE_THRESHOLD}%. Nenhuma not√≠cia ser√° enviada.")


